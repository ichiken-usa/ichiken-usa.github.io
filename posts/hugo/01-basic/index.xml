<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo導入 on Nexa Engineering</title><link>https://nexa-eng.com/posts/hugo/01-basic/</link><description>Recent content in Hugo導入 on Nexa Engineering</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://nexa-eng.com/posts/hugo/01-basic/index.xml" rel="self" type="application/rss+xml"/><item><title>HugoをMacにインストールする手順</title><link>https://nexa-eng.com/posts/hugo/01-basic/03-install-mac/</link><pubDate>Sun, 04 May 2025 18:10:00 +0900</pubDate><guid>https://nexa-eng.com/posts/hugo/01-basic/03-install-mac/</guid><description>&lt;p>こんにちは。&lt;a href="https://nexa-eng.com/#about">フリーランスエンジニアの市原&lt;i class="fas fa-link">&lt;/i>&lt;/a>です。&lt;/p>
&lt;p>HugoとGoとNode.jsをMacにインストールする手順を記載します。&lt;br>
本題前にコマンドを書いておきます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install hugo go node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上です。&lt;/p>
&lt;p>ちなみにこのサイトは Hugo + toha + GitHub Pages + XSever Domainにより&lt;strong>初年度1円&lt;/strong>で公開されています。&lt;/p>
&lt;h2 id="やってみたこと">やってみたこと&lt;/h2>
&lt;ul>
&lt;li>Homebrewを使ったソフトウェアのインストール(まだなら)&lt;/li>
&lt;li>ターミナルでHugoをインストールするコマンド&lt;/li>
&lt;li>Hugoのインストール確認方法&lt;/li>
&lt;/ul>
&lt;h2 id="手順">手順&lt;/h2>
&lt;p>&lt;a href="https://gohugo.io/installation/macos/" target="_blank" rel="noopener">Hugo公式インストールガイド &lt;i class="fa-solid fa-arrow-up-right-from-square">&lt;/i>&lt;/a>&lt;/p>
&lt;h3 id="1-homebrewをインストール">1. Homebrewをインストール&lt;/h3>
&lt;p>すでにインストール済みの場合はこのステップをスキップしてOKです。&lt;br>
MacにHomebrewが入っていない場合は、Macで絶対に外せないパッケージ管理&lt;a href="https://brew.sh/" target="_blank" rel="noopener">Homebrewの公式サイト&lt;i class="fa-solid fa-arrow-up-right-from-square">&lt;/i>&lt;/a>にアクセスします。&lt;br>
表示されているインストールコマンドをコピーして、ターミナルに貼り付けて実行します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/bin/bash -c &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでHomebrewがインストールされます。&lt;/p>
&lt;h3 id="2-hugoをインストール">2. Hugoをインストール&lt;/h3>
&lt;p>Homebrewが使えるようになったら、以下のコマンドをターミナルで実行してHugoをインストールします。&lt;br>
ついでなのでテーマをローカルで確認するのにGoとNode.jsが必要になるのでついでに入れておきましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install hugo go node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上！&lt;/p>
&lt;p>なお拡張版というのがあり、テーマによってはこちらが必要になるケースがあるようです。
試しに入れてみましたが、どちらにせよコマンド一発です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>CGO_ENABLED&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> go install -tags extended github.com/gohugoio/hugo@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-インストールを確認">3. インストールを確認&lt;/h3>
&lt;p>Hugoがちゃんとインストールされたか確認するには、以下のコマンドを実行します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このコマンドを実行してHugoのバージョン情報が表示されればOKです。&lt;br>
ちなみに、&lt;code>which hugo&lt;/code>コマンドを使うとHugoのインストール場所も確認できます。&lt;/p>
&lt;p>GoとNode.jsの確認もしておきましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Goのバージョン情報が表示されればインストール成功。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> node -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> npm -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>node -v&lt;/code>でNode.jsのバージョンが表示されれば成功。&lt;/li>
&lt;li>&lt;code>npm -v&lt;/code>でnpm（Node.jsのパッケージマネージャー）のバージョンが表示されれば成功。&lt;/li>
&lt;/ul>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Homebrewは便利&lt;/strong>: Macでソフトウェアをインストールするならこれ一択。&lt;/li>
&lt;li>&lt;strong>インストールコマンド&lt;/strong>: &lt;code>brew install hugo go node&lt;/code>&lt;/li>
&lt;li>&lt;strong>Hugoの確認コマンド&lt;/strong>： &lt;code>hugo version&lt;/code>&lt;/li>
&lt;li>&lt;strong>Goの確認コマンド&lt;/strong>: &lt;code>go version&lt;/code>&lt;/li>
&lt;li>&lt;strong>Node.jsの確認コマンド&lt;/strong>: &lt;code>node -v&lt;/code>&lt;/li>
&lt;li>&lt;strong>npmの確認コマンド&lt;/strong>: &lt;code>npm -v&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>これでMacにHugoをインストールできました。&lt;br>
次はHugoを使って実際に静的サイトを作ってみましょう。Hugoの高速さと使いやすさをぜひ体験してみてください！&lt;/p></description></item><item><title>HugoをWindowsにインストールする手順</title><link>https://nexa-eng.com/posts/hugo/01-basic/02-install-win/</link><pubDate>Sun, 04 May 2025 17:00:33 +0900</pubDate><guid>https://nexa-eng.com/posts/hugo/01-basic/02-install-win/</guid><description>&lt;p>こんにちは。&lt;a href="https://nexa-eng.com/#about">フリーランスエンジニアの市原&lt;i class="fas fa-link">&lt;/i>&lt;/a>です。&lt;/p>
&lt;p>HugoをWindowsにインストールするのはめちゃくちゃ簡単でしたが、公式はあっさりしているし、いくつか手段があって結局どれやねん！てなるかもしれません。&lt;br>
ここでは、実際にやってみた手順をざっくりまとめてみます。初心者でも迷わず進められるはずなので、ぜひ試してみてください。&lt;br>
これからHugoを使ってみたい人の参考になれば幸いです。&lt;/p>
&lt;p>ちなみにこのサイトは Hugo + toha + GitHub Pages + XSever Domainにより&lt;strong>初年度1円&lt;/strong>で公開されています。&lt;/p>
&lt;h2 id="やってみたこと">やってみたこと&lt;/h2>
&lt;ul>
&lt;li>Windowsにビルド済みバイナリのHugoを配置&lt;/li>
&lt;li>PATH環境変数を設定して、どこからでもHugoを使えるようにする&lt;/li>
&lt;li>のちのち必要になるGoとNode.jsも入れる&lt;/li>
&lt;/ul>
&lt;h2 id="hugoインストール手順">Hugoインストール手順&lt;/h2>
&lt;p>&lt;a href="https://gohugo.io/installation/windows/" target="_blank" rel="noopener">Hugo公式インストールガイド &lt;i class="fa-solid fa-arrow-up-right-from-square">&lt;/i>&lt;/a>&lt;/p>
&lt;p>インストーラではなく、ビルド済みのexeを置いてパスを通すスタイルです。&lt;br>
公式手順より詳細に記載しておきます。&lt;/p>
&lt;h3 id="1-フォルダを作る">1. フォルダを作る&lt;/h3>
&lt;p>まず、Cドライブに「Hugo」というフォルダを作成。&lt;br>
その中に「bin」というフォルダも作成。&lt;br>
この「bin」フォルダにHugoの実行ファイルを入れ流予定です。&lt;/p>
&lt;p>&lt;code>C:\Hugo\bin\&lt;/code>&lt;/p>
&lt;h3 id="2-hugoをダウンロード">2. Hugoをダウンロード&lt;/h3>
&lt;p>次に、&lt;a href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener">HugoのGitHubリリースページ&lt;/a>にアクセス。&lt;br>
自分のWindowsに合ったバージョンをダウンロードします。&lt;br>
だいたいwindows-amd64です。&lt;br>
私みたいにMシリーズのMacの仮想環境でWindowsを使ったりするとarmだったりします。&lt;/p>
&lt;h3 id="3-ファイルを解凍して配置">3. ファイルを解凍して配置&lt;/h3>
&lt;p>ダウンロードしたZIPファイルを解凍。&lt;br>
「hugo.exe」を「bin」に移動します。&lt;/p>
&lt;h3 id="4-コマンドラインでhugoを動かしてみる">4. コマンドラインでHugoを動かしてみる&lt;/h3>
&lt;p>コマンドプロンプトを開いて、作成した「Hugo/bin」フォルダに移動して以下を実行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd C:&lt;span style="color:#ae81ff">\H&lt;/span>ugo&lt;span style="color:#ae81ff">\b&lt;/span>in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これでHugoのバージョン情報が表示されれば、一旦動作確認はOKです。&lt;/p>
&lt;h3 id="5-path環境変数を設定">5. PATH環境変数を設定&lt;/h3>
&lt;p>どのフォルダからでもHugoを使えるようにするために、PATH環境変数を設定します。&lt;/p>
&lt;ol>
&lt;li>「システム環境変数の編集」を開く（Windowsの検索バーで「環境変数」と入力すると出る）。&lt;/li>
&lt;li>「システム環境変数」の「Path」を選択して編集をクリック。&lt;/li>
&lt;li>「新規」をクリックして、「C:\Hugo\bin」を追加。&lt;/li>
&lt;li>「保存」して完了。&lt;/li>
&lt;/ol>
&lt;h3 id="6-設定を確認">6. 設定を確認&lt;/h3>
&lt;p>コマンドプロンプトを再起動して、フォルダ移動せずに以下を実行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>どのフォルダからでもHugoのバージョン情報が表示されれば、設定完了👌&lt;/p>
&lt;p>以下のように、現在のブログ構成にGoとNode.jsのインストール手順を追加しました。Hugoの手順と同じトーンで記載しています。&lt;/p>
&lt;h2 id="goとnodejsのインストール手順">GoとNode.jsのインストール手順&lt;/h2>
&lt;p>Hugoを使う際に、テーマのローカル確認やビルドでGoとNode.jsが必要になる場合があります。&lt;br>
ついでなので、WindowsにGoとNode.jsをインストールしてしまいましょう。どちらもインストーラでポチポチで終わりです。&lt;/p>
&lt;h3 id="1-goをインストール">1. Goをインストール&lt;/h3>
&lt;p>まず、Goをインストールします。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Go公式サイトにアクセス&lt;/strong>&lt;br>
&lt;a href="https://go.dev/dl/" target="_blank" rel="noopener">Go公式ダウンロードページ &lt;i class="fa-solid fa-arrow-up-right-from-square">&lt;/i>&lt;/a>にアクセスします。&lt;/p></description></item><item><title>Hugo入門：静的サイトジェネレータの魅力</title><link>https://nexa-eng.com/posts/hugo/01-basic/01-intro/</link><pubDate>Sun, 04 May 2025 12:50:33 +0900</pubDate><guid>https://nexa-eng.com/posts/hugo/01-basic/01-intro/</guid><description>&lt;p>こんにちは。&lt;a href="https://nexa-eng.com/#about">フリーランスエンジニアの市原&lt;i class="fas fa-link">&lt;/i>&lt;/a>です。&lt;/p>
&lt;p>このページでは、Hugoという静的サイトジェネレーター（SSG）について初心者目線で情報を整理しています。&lt;br>
これからHugoを使ってみたい人の参考になれば幸いです。&lt;/p>
&lt;p>ちなみにこのサイトは Hugo + toha + GitHub Pages + XSever Domainにより&lt;strong>初年度1円&lt;/strong>で公開されています。&lt;/p>
&lt;h2 id="静的サイトと動的サイトの違い">静的サイトと動的サイトの違い&lt;/h2>
&lt;p>まず、静的サイトと動的サイトの違いを簡単に説明します。&lt;/p>
&lt;h3 id="静的サイトとは">静的サイトとは？&lt;/h3>
&lt;p>静的サイトは、HTMLファイルをそのままサーバーに置いて配信するシンプルな仕組みです。&lt;br>
例えば、個人ブログやポートフォリオサイトなんかに向いています。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>メリット&lt;/strong>: 高速、セキュア、ホスティングが安い&lt;/li>
&lt;li>&lt;strong>デメリット&lt;/strong>: 動的な機能（ログインやコメント機能など）が難しい&lt;/li>
&lt;/ul>
&lt;h3 id="動的サイトとは">動的サイトとは？&lt;/h3>
&lt;p>一方、動的サイトは、ユーザーごとに異なるコンテンツを生成する仕組みです。&lt;br>
例えば、FacebookやAmazonのようなサイトがこれに当たります。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>メリット&lt;/strong>: 柔軟でカスタマイズ性が高い&lt;/li>
&lt;li>&lt;strong>デメリット&lt;/strong>: サーバーリソースが必要で、管理が複雑&lt;/li>
&lt;/ul>
&lt;p>ログインで人によってコンテンツを変えたいとかなら別ですが、普通の個人ブログなら静的サイトで十分だと思います。
Hugoだと問い合わせフォームからメールを送るのが難しかったりしますが、これはGoogle Formsを埋め込んだりで代用できます。&lt;/p>
&lt;h2 id="hugoの特徴">Hugoの特徴&lt;/h2>
&lt;p>Hugoは静的サイトジェネレーターの中でも人気のあるツールの一つです。&lt;br>
以下の点が魅力的だと感じました。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>超高速&lt;/strong>: Go言語で作られていて、ビルドがめちゃくちゃ速く自称世界最速。お作法に従ったファイル配置にすれば構造を勝手に解析してページやタグやリンクを作ってくれて超ラク。&lt;/li>
&lt;li>&lt;strong>Markdown対応&lt;/strong>: 記事はマークダウンで書けるので、普段資料等をマークダウンで作っている私にピッタリ。ローカルHugoサーバを立ち上げれば、書きながらホットリロードで即確認できます。&lt;/li>
&lt;li>&lt;strong>無料でオープンソース&lt;/strong>: 豊富なテーマが揃っていて、カスタマイズもお作法さえわかれば結構簡単。&lt;/li>
&lt;li>&lt;strong>柔軟性&lt;/strong>: テンプレートやレイアウトの自由度が高い。&lt;/li>
&lt;/ul>
&lt;h2 id="他のcmsとの比較">他のCMSとの比較&lt;/h2>
&lt;p>WordPressなどと比較して、Hugoには以下のようなメリットがあります。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>パフォーマンス&lt;/strong>: 静的サイトなので、ページの読み込みが速い。&lt;/li>
&lt;li>&lt;strong>セキュリティ&lt;/strong>: データベースを使わないので、ハッキングリスクが低い。&lt;/li>
&lt;li>&lt;strong>コスト&lt;/strong>: 無料で使える。GitHub Pagesとの組み合わせで0円運用可能。GitHub Pagesはカスタムドメインも対応可能。XServer Domainなら初年度1円でGoogleアドセンス可能。&lt;/li>
&lt;/ul>
&lt;h2 id="他の選択肢まとめ">他の選択肢まとめ&lt;/h2>
&lt;p>その他の静的サイトジェネレータの選択肢を(GPTさんが)整理しました。&lt;br>
ざっくり上から人気順です。そもそもマークダウンで書いたろ！って人が少ないんでしょうね。。。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">名前&lt;/th>
&lt;th style="text-align: left">特徴&lt;/th>
&lt;th style="text-align: left">公式サイト&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Next.js&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Reactベースのフレームワークで、静的サイトと動的サイトの両方を構築可能。SSRやSSGをサポートし、高度な機能が豊富。&lt;br>&lt;strong>評価&lt;/strong>: Reactエコシステムの中心的存在で、最新技術を活用可能。&lt;/td>
&lt;td style="text-align: left">&lt;a href="https://nextjs.org/" target="_blank" rel="noopener">https://nextjs.org/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Gatsby&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Reactベースの静的サイトジェネレータで、GraphQLを使用して柔軟なデータ管理が可能。プラグインエコシステムが充実し、SEOに強い。&lt;br>&lt;strong>評価&lt;/strong>: Reactユーザーに支持され、SEOやパフォーマンスに特化。&lt;/td>
&lt;td style="text-align: left">&lt;a href="https://www.gatsbyjs.com/" target="_blank" rel="noopener">https://www.gatsbyjs.com/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Hugo&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Go言語で構築された静的サイトジェネレータで、超高速なビルド速度を誇る。Markdown対応で簡単にコンテンツ作成が可能。&lt;br>&lt;strong>評価&lt;/strong>: 高速性と柔軟性が評価され、初心者から上級者まで幅広く支持されている。&lt;/td>
&lt;td style="text-align: left">&lt;a href="https://gohugo.io/" target="_blank" rel="noopener">https://gohugo.io/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Jekyll&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Rubyで構築された静的サイトジェネレータ。GitHub Pagesと統合され無料ホスティング可能。プラグインやテーマが豊富でカスタマイズ性が高い。&lt;br>&lt;strong>評価&lt;/strong>: 長年の実績とGitHub Pagesとの親和性が高い。&lt;/td>
&lt;td style="text-align: left">&lt;a href="https://jekyllrb.com/" target="_blank" rel="noopener">https://jekyllrb.com/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Nuxt.js&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Vue.jsベースのフレームワークで、SSGとSSRをサポート。プラグインやモジュールが豊富で柔軟な開発が可能。&lt;br>&lt;strong>評価&lt;/strong>: Vue.jsユーザーにとって最適な選択肢として支持されている。&lt;/td>
&lt;td style="text-align: left">&lt;a href="https://nuxtjs.org/" target="_blank" rel="noopener">https://nuxtjs.org/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Eleventy&lt;/strong>&lt;/td>
&lt;td style="text-align: left">JavaScriptで構築された軽量な静的サイトジェネレータで、シンプルで柔軟性が高く、高速。初心者にも扱いやすい。&lt;br>&lt;strong>評価&lt;/strong>: 軽量でシンプルな構成が好まれ、JavaScriptユーザーに人気。&lt;/td>
&lt;td style="text-align: left">&lt;a href="https://www.11ty.dev/" target="_blank" rel="noopener">https://www.11ty.dev/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Hexo&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Node.jsベースの静的サイトジェネレータで、高速でMarkdownを使用して簡単にコンテンツ作成可能。ブログ向けに最適化。&lt;br>&lt;strong>評価&lt;/strong>: ブログ用途に特化し、Node.jsユーザーに支持されている。&lt;/td>
&lt;td style="text-align: left">&lt;a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Docusaurus&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Facebookが開発した静的サイトジェネレータで、ドキュメントサイトやブログの作成に特化。Reactベースでカスタマイズ性が高い。&lt;br>&lt;strong>評価&lt;/strong>: Facebook製で信頼性が高く、Reactユーザーに支持されている。&lt;/td>
&lt;td style="text-align: left">&lt;a href="https://docusaurus.io/" target="_blank" rel="noopener">https://docusaurus.io/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>MkDocs&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Pythonで構築され、ドキュメントサイトの作成に特化。Markdownを使用して簡単にドキュメント作成可能。&lt;br>&lt;strong>評価&lt;/strong>: 技術ドキュメント作成に特化し、Pythonユーザーに支持されている。&lt;/td>
&lt;td style="text-align: left">&lt;a href="https://www.mkdocs.org/" target="_blank" rel="noopener">https://www.mkdocs.org/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Zola&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Rustで構築された静的サイトジェネレータで、シンプルで高速、設定が簡単。デフォルトで多言語対応をサポート。&lt;br>&lt;strong>評価&lt;/strong>: Rustユーザーに注目され、高速性が評価されている。&lt;/td>
&lt;td style="text-align: left">&lt;a href="https://www.getzola.org/" target="_blank" rel="noopener">https://www.getzola.org/&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;strong>Pelican&lt;/strong>&lt;/td>
&lt;td style="text-align: left">Pythonで構築された静的サイトジェネレータで、MarkdownやreStructuredTextをサポート。シンプルでPythonユーザーに最適。&lt;br>&lt;strong>評価&lt;/strong>: Pythonユーザーに特化したツールとして利用されている。&lt;/td>
&lt;td style="text-align: left">&lt;a href="https://getpelican.com" target="_blank" rel="noopener">https://getpelican.com&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>マークダウン対応、テンプレートがあってカスタム可能、運用コストが低い、それなりの人気とコミュニティ継続、&lt;br>
これらを満たすのがHugoでした。テーマ選びをミスらなければ、数分でテストページ公開できるし、ブログにも超使いやすいです。（紹介の多いテーマの後継HugoBlox/theme-academic-cvは構造がややこしすぎるし更新止まっているのでやめとけ）&lt;/p></description></item></channel></rss>